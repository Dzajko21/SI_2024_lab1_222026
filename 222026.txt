4. git init - Го иницијализираме нашиот локален git репозиториум со крепирање на .git фолдер

5.git remote add https://github.com/Dzajko21/SI_2024_lab1_222026.git - Додаваме "remote" репозиториум кој ќе е поврзан со нашиот локален репозиториум.

6.
1)nano README.md(име,презиме,индекс) - Правиме нова датотека со барањата
2)git add . - Со оваа команда го праќаме фајлот во "Staged"(состојба), односно го праќаме фајлот на сцена и така одбираме кои фајлови или датотеки сакаме да ги пратиме во комитот.Во овој сучај искористиов git add . затоа што немам други фајлови и датотеки и сакам да направам commit само со тој фајл.
3)git commit -m "Initial commit" - Правиме git commit со пораката "Initial commit"

7.
1)git add . - Ги праќаме на сцена трите датотеки  
2)git commit -m "Add starter code" - преме "commit" со трите датотеки со порака "Add starter code"

8.git push origin master - Ги праќаме промените кои сме ги направиле на "master" гранката до нашиот локален репозиториум.

9.
1)git branch bug1 - Ја креираме bug1 гранката
2)git branch bug2 - Ја креираме bug2 гранката

10.git checkout bug1 - Се префрламе од master гранка на bug1 гранката

11.Ја отвараме датотеката ги правиме променит и потоа само правиме git commit -m "Fix wrong condition in filterOddLengthStrings" со што ги зачувуваме променит кои сме ги направиле и даваме соодветна порака за тоа што сме промениле.

12.git checkout bug2 - Се префрламе од master гранката на bug2 гранката  

13.Истото како и кај 11 прашање само со тоа што пораката е различна затоа што вршиме други промени.

14.Истото како и кај 10 прашање

15.Истото што го правевме кај 11 и 13 прашање само со различна порака.

16.Истото како во прашање 12.

17.Истото како и кај 11,13 и 15 прашање.

18.git push all origin - Ги "притискаме" сите гранки до оригиналниот "remote" репозиториум.Секоја гранка ќе се копира соодветно во нејзината соодветна одалечена гранка доколку е крирана,а во спротивно ќе се креира таква гранка.

19.git checkout master - Се префрламе на "master" гранката.

20.git merge bug1 - Ја спојуваме содржината на "bug1" со "master" гранката.Бидејки немаме конфликт Git автоматски ќе ги примени промените од "bug1" врз "Master".Во инаков случај доколку имаме конфликт ќе треба ние да го решиме конфликтот и ќе се направи нов "merge commit".

21.git push -all origin - исто како и 18 прашање

22.git checkout bug2

23.git rebase master - Ги преместуваме сите комити на гранката "bug2" кои не се вклучени во "master" на почетокот на "master" еден по еден и потоа ги применува промените од "master" врз "bug2". Со тоа што тука ни се јавува конфликт кој ние го решаваме потоа правиме "commit" со решениот конфликт и продолжуваме со командата "git rebase --continue" и се извршува целиот "rebase" без никаков проблем.

24.git checkout master - се префрламе на "master" гранката.

25.git merge bug2 - гранката се спојува без никаков проблем.

26.Исто како прашање 18.

27.git push --force origin bug2 - Истото како и кај 18 прашање со тоа што користиме --force зато што "bug2" во нашиот локален локален репозиториум и "remote" репозиториумот имаат различна историја. 

28.Откако го завршивме сите барања правиме нова датокета во која ги чуваме сите работи кои сме ги направиле и правиме "commit" со соодветна порака

29.git push all origin
